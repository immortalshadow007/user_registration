"""
Django settings for user_registrations project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import warnings
from pathlib import Path
from dotenv import load_dotenv
from mongoengine import connect
from urllib.parse import quote
from cryptography.utils import CryptographyDeprecationWarning

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from the custom .env file
env_file_path = BASE_DIR / '.env.mongodb.django'
env_database_file_path = BASE_DIR / '.env.mongodb.db_store'
env_api_file_path = BASE_DIR / '.env.api_keys'
env_api_management_file_path = BASE_DIR / '.env.api_management'
env_azure_file_path = BASE_DIR / '.env.azure.credentials'

# Load Django environment variables
if os.path.exists(env_file_path):
    load_dotenv(env_file_path)
else:
    print(f"Environment file {env_file_path} does not exist")

# Load database environment variables
if os.path.exists(env_database_file_path):
    load_dotenv(env_database_file_path)
else:
    print(f"Database environment file {env_database_file_path} does not exist")

# Load API key-related environment variables
if os.path.exists(env_api_file_path):
    load_dotenv(env_api_file_path)
else:
    print(f"API key environment file {env_api_file_path} does not exist")

# Load Azure credentials environment variables
if os.path.exists(env_azure_file_path):
    load_dotenv(env_azure_file_path)
else:
    print(f"Azure credentials environment file {env_azure_file_path} does not exist")

# Load API Management environment variables
if os.path.exists(env_api_management_file_path):
    load_dotenv(env_api_management_file_path)
else:
    print(f"API management environment file {env_api_management_file_path} does not exist")

'''
# Load Redis configuration environment variables
if os.path.exists(env_redis_file_path):
    load_dotenv(env_redis_file_path)
else:
    print(f'Redis Configuration environment file {env_redis_file_path} does not exist')
'''

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("No DJANGO_SECRET_KEY set for Django application")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'False'

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '[::1]',  # This is the IPv6 localhost
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'mobile_number',
    'mongoengine',
    'rest_framework',
    'django_celery_beat',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mobile_number.middleware.APIKeyMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'https://localhost:3000',
    'http://localhost',
]

CORS_ALLOW_HEADERS = [
    'X-API-KEY',
    'M-API-KEYS',
    'Authorization',
    'Content-Type',
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'OPTIONS',
]

ROOT_URLCONF = 'user_registrations.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'user_registrations.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# MongoDB settings
MONGO_DB_NAME = os.getenv('MONGO_DB_NAME')
MONGO_DB_URI = os.getenv('MONGO_DB_URI')

# MongoDB Connection
try:
    connect(
        db=os.getenv('MONGO_DB_NAME'),
        host=os.getenv('MONGO_DB_URI'),
        alias='default',
        connectTimeoutMS=5000,
        socketTimeoutMS=5000,
        serverSelectionTimeoutMS=5000
    )
except Exception as e:
    print(f"Failed to connect to MongoDB. Error: {e}")
    raise

try:
    connect (
        db = os.getenv('USER_PROFILE_DB'),
        host = os.getenv('MONGO_DB_URI'),
        alias = 'user_profile_db',
        connectTimeoutMS = 5000,
        socketTimeoutMS = 5000,
        serverSelectionTimeoutMS = 5000
    )
except Exception as e:
    print(f'Failed to connect to MongoDB (user_profile). Error: {e}')
    raise

# Redis Configuration
REDIS_HOST = os.getenv('REDIS_HOST', 'userregistrations.redis.cache.windows.net')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')  # Change this to 6379 if you're using the non-SSL port
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', '')
REDIS_DB = os.getenv('REDIS_DB', '0')

# Encode the password
encoded_password = quote(REDIS_PASSWORD)

# Construct Redis URL
REDIS_URL = f"redis://:{encoded_password}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"

# Celery Configuration
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Channels Configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [REDIS_URL],
        },
    },
}

# Azure Cache for Redis specific settings
CELERY_REDIS_MAX_CONNECTIONS = 20

# Suppress CryptographyDeprecationWarning warnings
warnings.filterwarnings("ignore", category=CryptographyDeprecationWarning)

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'ignore_deprecation_warnings': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not isinstance(record.exc_info, tuple) or not issubclass(record.exc_info[0], CryptographyDeprecationWarning),
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'mobile_number': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'azure': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # Change this to WARNING or ERROR
            'propagate': False,
        },
        'azure.core': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # Change this to WARNING or ERROR
            'propagate': False,
        },
        'azure.identity': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # Change this to WARNING or ERROR
            'propagate': False,
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

'''
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
'''

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
